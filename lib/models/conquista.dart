enum TipoConquista {
  moduloCompleto, // Completar um m√≥dulo espec√≠fico
  unidadeCompleta, // Completar toda uma unidade tem√°tica
  nivelAlcancado, // Alcan√ßar um n√≠vel (Intermedi√°rio, Avan√ßado, etc.)
  streakExercicios, // Sequ√™ncia de exerc√≠cios corretos
  pontuacaoTotal, // Atingir total de pontos
  tempoRecord, // Resolver exerc√≠cio rapidamente
  perfeccionista, // 100% de acerto em um m√≥dulo
  persistente, // Completar exerc√≠cios v√°rios dias seguidos
}

class Conquista {
  final String id;
  final String titulo;
  final String descricao;
  final String emoji;
  final TipoConquista tipo;
  final Map<String, dynamic> criterios;
  final int pontosBonus;
  final DateTime? dataConquista;
  final bool desbloqueada;

  Conquista({
    required this.id,
    required this.titulo,
    required this.descricao,
    required this.emoji,
    required this.tipo,
    required this.criterios,
    this.pontosBonus = 0,
    this.dataConquista,
    this.desbloqueada = false,
  });

  Conquista copyWith({
    DateTime? dataConquista,
    bool? desbloqueada,
  }) {
    return Conquista(
      id: id,
      titulo: titulo,
      descricao: descricao,
      emoji: emoji,
      tipo: tipo,
      criterios: criterios,
      pontosBonus: pontosBonus,
      dataConquista: dataConquista ?? this.dataConquista,
      desbloqueada: desbloqueada ?? this.desbloqueada,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'titulo': titulo,
      'descricao': descricao,
      'emoji': emoji,
      'tipo': tipo.index,
      'criterios': criterios,
      'pontosBonus': pontosBonus,
      'dataConquista': dataConquista?.toIso8601String(),
      'desbloqueada': desbloqueada,
    };
  }

  factory Conquista.fromJson(Map<String, dynamic> json) {
    return Conquista(
      id: json['id'],
      titulo: json['titulo'],
      descricao: json['descricao'],
      emoji: json['emoji'],
      tipo: TipoConquista.values[json['tipo']],
      criterios: Map<String, dynamic>.from(json['criterios']),
      pontosBonus: json['pontosBonus'] ?? 0,
      dataConquista: json['dataConquista'] != null
          ? DateTime.parse(json['dataConquista'])
          : null,
      desbloqueada: json['desbloqueada'] ?? false,
    );
  }
}

class ConquistasData {
  static final List<Conquista> _conquistasBase = [
    // Conquistas por m√≥dulo completo
    Conquista(
      id: 'primeiro_modulo',
      titulo: 'Primeiro Passo',
      descricao: 'Complete seu primeiro m√≥dulo',
      emoji: 'üå±',
      tipo: TipoConquista.moduloCompleto,
      criterios: {'quantidade': 1},
      pontosBonus: 50,
    ),
    Conquista(
      id: 'dez_modulos',
      titulo: 'Dedicado',
      descricao: 'Complete 10 m√≥dulos',
      emoji: 'üìö',
      tipo: TipoConquista.moduloCompleto,
      criterios: {'quantidade': 10},
      pontosBonus: 200,
    ),
    Conquista(
      id: 'vinte_modulos',
      titulo: 'Estudioso',
      descricao: 'Complete 20 m√≥dulos',
      emoji: 'üéì',
      tipo: TipoConquista.moduloCompleto,
      criterios: {'quantidade': 20},
      pontosBonus: 400,
    ),

    // Conquistas por unidade completa
    Conquista(
      id: 'numeros_completo',
      titulo: 'Mestre dos N√∫meros',
      descricao: 'Complete toda a unidade de N√∫meros',
      emoji: 'üî¢',
      tipo: TipoConquista.unidadeCompleta,
      criterios: {'unidade': 'N√∫meros'},
      pontosBonus: 300,
    ),
    Conquista(
      id: 'algebra_completo',
      titulo: 'Algebrista',
      descricao: 'Complete toda a unidade de √Ålgebra',
      emoji: 'üìê',
      tipo: TipoConquista.unidadeCompleta,
      criterios: {'unidade': '√Ålgebra'},
      pontosBonus: 300,
    ),
    Conquista(
      id: 'geometria_completo',
      titulo: 'Ge√¥metra',
      descricao: 'Complete toda a unidade de Geometria',
      emoji: 'üìè',
      tipo: TipoConquista.unidadeCompleta,
      criterios: {'unidade': 'Geometria'},
      pontosBonus: 300,
    ),
    Conquista(
      id: 'grandezas_completo',
      titulo: 'Medidor Expert',
      descricao: 'Complete toda a unidade de Grandezas e Medidas',
      emoji: 'üìä',
      tipo: TipoConquista.unidadeCompleta,
      criterios: {'unidade': 'Grandezas e Medidas'},
      pontosBonus: 300,
    ),
    Conquista(
      id: 'probabilidade_completo',
      titulo: 'Estat√≠stico',
      descricao: 'Complete toda a unidade de Probabilidade e Estat√≠stica',
      emoji: 'üìà',
      tipo: TipoConquista.unidadeCompleta,
      criterios: {'unidade': 'Probabilidade e Estat√≠stica'},
      pontosBonus: 300,
    ),

    // Conquistas por n√≠vel
    Conquista(
      id: 'nivel_intermediario',
      titulo: 'Evoluindo',
      descricao: 'Alcance o n√≠vel Intermedi√°rio',
      emoji: 'üìñ',
      tipo: TipoConquista.nivelAlcancado,
      criterios: {'nivel': 1}, // NivelUsuario.intermediario.index
      pontosBonus: 150,
    ),
    Conquista(
      id: 'nivel_avancado',
      titulo: 'Progredindo',
      descricao: 'Alcance o n√≠vel Avan√ßado',
      emoji: 'üéì',
      tipo: TipoConquista.nivelAlcancado,
      criterios: {'nivel': 2}, // NivelUsuario.avancado.index
      pontosBonus: 300,
    ),

    // Conquistas por streak
    Conquista(
      id: 'streak_5',
      titulo: 'Em Ritmo',
      descricao: 'Acerte 5 exerc√≠cios seguidos',
      emoji: 'üî•',
      tipo: TipoConquista.streakExercicios,
      criterios: {'streak': 5},
      pontosBonus: 50,
    ),
    Conquista(
      id: 'streak_10',
      titulo: 'Impar√°vel',
      descricao: 'Acerte 10 exerc√≠cios seguidos',
      emoji: '‚ö°',
      tipo: TipoConquista.streakExercicios,
      criterios: {'streak': 10},
      pontosBonus: 100,
    ),
    Conquista(
      id: 'streak_20',
      titulo: 'Fen√¥meno',
      descricao: 'Acerte 20 exerc√≠cios seguidos',
      emoji: 'üåü',
      tipo: TipoConquista.streakExercicios,
      criterios: {'streak': 20},
      pontosBonus: 250,
    ),

    // Conquistas por pontua√ß√£o
    Conquista(
      id: 'mil_pontos',
      titulo: 'Milion√°rio',
      descricao: 'Acumule 1000 pontos totais',
      emoji: 'üí∞',
      tipo: TipoConquista.pontuacaoTotal,
      criterios: {'pontos': 1000},
      pontosBonus: 100,
    ),
    Conquista(
      id: 'cinco_mil_pontos',
      titulo: 'Magnata',
      descricao: 'Acumule 5000 pontos totais',
      emoji: 'üíé',
      tipo: TipoConquista.pontuacaoTotal,
      criterios: {'pontos': 5000},
      pontosBonus: 500,
    ),

    // Conquistas especiais de tempo
    Conquista(
      id: 'velocista',
      titulo: 'Velocista',
      descricao: 'Resolva um exerc√≠cio em menos de 10 segundos',
      emoji: '‚ö°',
      tipo: TipoConquista.tempoRecord,
      criterios: {'tempo_maximo': 10},
      pontosBonus: 75,
    ),
    Conquista(
      id: 'flash',
      titulo: 'Flash',
      descricao: 'Resolva um exerc√≠cio em menos de 5 segundos',
      emoji: 'üèÉ‚Äç‚ôÇÔ∏è',
      tipo: TipoConquista.tempoRecord,
      criterios: {'tempo_maximo': 5},
      pontosBonus: 150,
    ),

    // Conquistas de perfei√ß√£o
    Conquista(
      id: 'perfeccionista',
      titulo: 'Perfeccionista',
      descricao: 'Complete um m√≥dulo com 100% de acerto',
      emoji: 'üíØ',
      tipo: TipoConquista.perfeccionista,
      criterios: {'taxa_acerto': 1.0},
      pontosBonus: 150,
    ),
    Conquista(
      id: 'ace_matematico',
      titulo: '√Ås Matem√°tico',
      descricao: 'Complete 5 m√≥dulos com 100% de acerto',
      emoji: 'üéØ',
      tipo: TipoConquista.perfeccionista,
      criterios: {'modulos_perfeitos': 5},
      pontosBonus: 500,
    ),

    // Conquistas de persist√™ncia
    Conquista(
      id: 'persistente_3_dias',
      titulo: 'Constante',
      descricao: 'Estude por 3 dias consecutivos',
      emoji: 'üåü',
      tipo: TipoConquista.persistente,
      criterios: {'dias_consecutivos': 3},
      pontosBonus: 100,
    ),
    Conquista(
      id: 'persistente_7_dias',
      titulo: 'Dedicado',
      descricao: 'Estude por 7 dias consecutivos',
      emoji: 'üî•',
      tipo: TipoConquista.persistente,
      criterios: {'dias_consecutivos': 7},
      pontosBonus: 250,
    ),
    Conquista(
      id: 'persistente_30_dias',
      titulo: 'Inabal√°vel',
      descricao: 'Estude por 30 dias consecutivos',
      emoji: 'üëë',
      tipo: TipoConquista.persistente,
      criterios: {'dias_consecutivos': 30},
      pontosBonus: 1000,
    ),

    // Conquistas especiais tem√°ticas
    Conquista(
      id: 'primeiro_exercicio',
      titulo: 'Primeiro Passo',
      descricao: 'Complete seu primeiro exerc√≠cio',
      emoji: 'üöÄ',
      tipo: TipoConquista.moduloCompleto,
      criterios: {'exercicios_completos': 1},
      pontosBonus: 25,
    ),
    Conquista(
      id: 'madrugador',
      titulo: 'Madrugador',
      descricao: 'Complete exerc√≠cios antes das 8h da manh√£',
      emoji: 'üåÖ',
      tipo: TipoConquista.tempoRecord,
      criterios: {'hora_maxima': 8},
      pontosBonus: 50,
    ),
    Conquista(
      id: 'coruja',
      titulo: 'Coruja Noturna',
      descricao: 'Complete exerc√≠cios ap√≥s as 22h',
      emoji: 'ü¶â',
      tipo: TipoConquista.tempoRecord,
      criterios: {'hora_minima': 22},
      pontosBonus: 50,
    ),
    Conquista(
      id: 'maratonista',
      titulo: 'Maratonista',
      descricao: 'Complete 50 exerc√≠cios em um √∫nico dia',
      emoji: 'üèÉ‚Äç‚ôÄÔ∏è',
      tipo: TipoConquista.streakExercicios,
      criterios: {'exercicios_dia': 50},
      pontosBonus: 300,
    ),
    Conquista(
      id: 'exploradora',
      titulo: 'Exploradora',
      descricao: 'Complete pelo menos 1 exerc√≠cio de cada unidade',
      emoji: 'üó∫Ô∏è',
      tipo: TipoConquista.unidadeCompleta,
      criterios: {'unidades_exploradas': 5},
      pontosBonus: 200,
    ),
    Conquista(
      id: 'centenario',
      titulo: 'Centen√°rio',
      descricao: 'Complete 100 exerc√≠cios no total',
      emoji: 'üíØ',
      tipo: TipoConquista.streakExercicios,
      criterios: {'exercicios_total': 100},
      pontosBonus: 400,
    ),

    // Conquistas especiais e divertidas
    Conquista(
      id: 'calculadora_humana',
      titulo: 'Calculadora Humana',
      descricao: 'Acerte 10 exerc√≠cios de c√°lculo mental seguidos',
      emoji: 'üß†',
      tipo: TipoConquista.streakExercicios,
      criterios: {'streak_calculo_mental': 10},
      pontosBonus: 200,
    ),
    Conquista(
      id: 'geometra_espacial',
      titulo: 'Ge√¥metra Espacial',
      descricao: 'Domine todos os conceitos de geometria espacial',
      emoji: 'üî∑',
      tipo: TipoConquista.unidadeCompleta,
      criterios: {'geometria_espacial': true},
      pontosBonus: 300,
    ),
    Conquista(
      id: 'mestre_fracoes',
      titulo: 'Mestre das Fra√ß√µes',
      descricao: 'Complete 20 exerc√≠cios de fra√ß√µes com 100% de acerto',
      emoji: 'üç∞',
      tipo: TipoConquista.perfeccionista,
      criterios: {'fracoes_perfeitas': 20},
      pontosBonus: 250,
    ),
    Conquista(
      id: 'estatistico_genial',
      titulo: 'Estat√≠stico Genial',
      descricao: 'Resolva corretamente todos os tipos de gr√°ficos',
      emoji: 'üìä',
      tipo: TipoConquista.unidadeCompleta,
      criterios: {'tipos_graficos': 5},
      pontosBonus: 180,
    ),
    Conquista(
      id: 'probabilista',
      titulo: 'Probabilista',
      descricao: 'Acerte 15 exerc√≠cios de probabilidade consecutivos',
      emoji: 'üé≤',
      tipo: TipoConquista.streakExercicios,
      criterios: {'streak_probabilidade': 15},
      pontosBonus: 220,
    ),
    Conquista(
      id: 'rapido_e_furioso',
      titulo: 'R√°pido e Furioso',
      descricao: 'Complete 10 exerc√≠cios em menos de 5 minutos',
      emoji: 'üèéÔ∏è',
      tipo: TipoConquista.tempoRecord,
      criterios: {'exercicios_rapidos': 10, 'tempo_total': 300},
      pontosBonus: 300,
    ),
    Conquista(
      id: 'sem_calculadora',
      titulo: 'Sem Calculadora',
      descricao: 'Resolva 25 exerc√≠cios de c√°lculo sem usar dicas',
      emoji: 'üö´üì±',
      tipo: TipoConquista.perfeccionista,
      criterios: {'sem_ajuda': 25},
      pontosBonus: 275,
    ),
    Conquista(
      id: 'resolver_problemas',
      titulo: 'Resolvedor de Problemas',
      descricao: 'Complete 15 problemas de aplica√ß√£o pr√°tica',
      emoji: 'üîß',
      tipo: TipoConquista.moduloCompleto,
      criterios: {'problemas_praticos': 15},
      pontosBonus: 350,
    ),
    Conquista(
      id: 'investigador',
      titulo: 'Investigador Matem√°tico',
      descricao: 'Use a IA para fazer 10 perguntas sobre conceitos',
      emoji: 'üîç',
      tipo: TipoConquista.streakExercicios,
      criterios: {'perguntas_ia': 10},
      pontosBonus: 150,
    ),
    Conquista(
      id: 'melhorou_nota',
      titulo: 'Evoluindo Sempre',
      descricao: 'Melhore sua pontua√ß√£o em um t√≥pico 3 vezes',
      emoji: 'üìà',
      tipo: TipoConquista.nivelAlcancado,
      criterios: {'melhorias': 3},
      pontosBonus: 125,
    ),

    // Conquistas comemorativas e sazonais
    Conquista(
      id: 'aniversario_app',
      titulo: 'Primeira Semana',
      descricao: 'Use o app por 7 dias (n√£o consecutivos)',
      emoji: 'üéÇ',
      tipo: TipoConquista.persistente,
      criterios: {'dias_uso_total': 7},
      pontosBonus: 100,
    ),
    Conquista(
      id: 'mes_completo',
      titulo: 'M√™s Matem√°tico',
      descricao: 'Use o app por 30 dias (n√£o consecutivos)',
      emoji: 'üìÖ',
      tipo: TipoConquista.persistente,
      criterios: {'dias_uso_total': 30},
      pontosBonus: 500,
    ),
    Conquista(
      id: 'fim_de_semana',
      titulo: 'Fim de Semana Produtivo',
      descricao: 'Complete exerc√≠cios no s√°bado E domingo',
      emoji: 'üåü',
      tipo: TipoConquista.persistente,
      criterios: {'fim_semana_ativo': true},
      pontosBonus: 80,
    ),
    Conquista(
      id: 'segunda_feira',
      titulo: 'Segunda-feira Motivada',
      descricao: 'Complete exerc√≠cios toda segunda por 4 semanas',
      emoji: 'üí™',
      tipo: TipoConquista.persistente,
      criterios: {'segundas_ativas': 4},
      pontosBonus: 150,
    ),
    Conquista(
      id: 'volta_aulas',
      titulo: 'Volta √†s Aulas',
      descricao: 'Complete 20 exerc√≠cios em fevereiro/mar√ßo',
      emoji: 'üéí',
      tipo: TipoConquista.moduloCompleto,
      criterios: {'exercicios_volta_aulas': 20},
      pontosBonus: 200,
    ),

    // Conquistas de colabora√ß√£o e social
    Conquista(
      id: 'ajudou_colega',
      titulo: 'Colega Solid√°rio',
      descricao: 'Compartilhe uma explica√ß√£o √∫til',
      emoji: 'ü§ù',
      tipo: TipoConquista.streakExercicios,
      criterios: {'compartilhamentos': 1},
      pontosBonus: 75,
    ),
    Conquista(
      id: 'guru_matematico',
      titulo: 'Guru Matem√°tico',
      descricao: 'Alcance 10.000 pontos totais',
      emoji: 'üßô‚Äç‚ôÇÔ∏è',
      tipo: TipoConquista.pontuacaoTotal,
      criterios: {'pontos': 10000},
      pontosBonus: 1000,
    ),
    Conquista(
      id: 'colecionador',
      titulo: 'Colecionador de Medalhas',
      descricao: 'Desbloqueie 50% de todas as conquistas',
      emoji: 'üèÖ',
      tipo: TipoConquista.streakExercicios,
      criterios: {'porcentagem_conquistas': 0.5},
      pontosBonus: 500,
    ),
    Conquista(
      id: 'completista',
      titulo: 'Completista',
      descricao: 'Desbloqueie 90% de todas as conquistas',
      emoji: 'üèÜ',
      tipo: TipoConquista.streakExercicios,
      criterios: {'porcentagem_conquistas': 0.9},
      pontosBonus: 1500,
    ),
    Conquista(
      id: 'lenda_matem√°tica',
      titulo: 'Lenda Matem√°tica',
      descricao: 'Desbloqueie TODAS as conquistas',
      emoji: 'üëë',
      tipo: TipoConquista.streakExercicios,
      criterios: {'porcentagem_conquistas': 1.0},
      pontosBonus: 2500,
    ),
  ];

  static List<Conquista> obterTodasConquistas() {
    return List.from(_conquistasBase);
  }

  static List<Conquista> obterConquistasPorTipo(TipoConquista tipo) {
    return _conquistasBase.where((c) => c.tipo == tipo).toList();
  }

  static Conquista? obterConquistaPorId(String id) {
    try {
      return _conquistasBase.firstWhere((c) => c.id == id);
    } catch (e) {
      return null;
    }
  }

  static List<Conquista> obterConquistasDesbloqueadas(
      List<String> idsDesbloqueadas) {
    return _conquistasBase
        .where((c) => idsDesbloqueadas.contains(c.id))
        .map((c) => c.copyWith(desbloqueada: true))
        .toList();
  }

  static List<Conquista> obterConquistasBloqueadas(
      List<String> idsDesbloqueadas) {
    return _conquistasBase
        .where((c) => !idsDesbloqueadas.contains(c.id))
        .toList();
  }
}
